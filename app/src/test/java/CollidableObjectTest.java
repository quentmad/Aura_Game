import aura_game.app.Objects.CollidableObject;
import aura_game.app.Util.Triplet;
import com.badlogic.gdx.math.Rectangle;
import org.junit.jupiter.api.Test;

import java.awt.*;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class CollidableObjectTest {

// Generated by CodiumAI

import aura_game.app.Objects.CollidableObject;

import org.junit.Test;
import static org.junit.Assert.*;

    public class CollidableObjectTest {


        // initializes all instance variables correctly
        @Test
        public void test_initializes_instance_variables() {
            Rectangle hitboxFlat = new Rectangle(0, 0, 10, 10);
            Polygon hitboxPolygon = new Polygon(new float[]{0, 0, 10, 0, 10, 10, 0, 10});
            List<Triplet<String, Integer, Integer>> deathLoots = new ArrayList<>();

            CollidableObject collidableObject = new CollidableObject("name", hitboxFlat, 0, 0, 10, hitboxPolygon, 10, 0, deathLoots);

            assertEquals("name", collidableObject.getName());
            assertEquals(hitboxFlat, collidableObject.getHitboxFlat());
            assertEquals(10, collidableObject.getTall());
            assertEquals(hitboxPolygon, collidableObject.getHitboxPolygon());
            assertEquals(10, collidableObject.getHitboxHeight());
            assertEquals(0, collidableObject.getOffY());
            assertEquals(deathLoots, collidableObject.deathLoots);
            assertNotNull(collidableObject.getUI());
            assertEquals(2.0f, collidableObject.getMaxLives(), 0.01);
            assertEquals(2.0f, collidableObject.getLife(), 0.01);
            assertFalse(collidableObject.isDead());
            assertNull(collidableObject.getListIndexGrid());
        }

        // deathLoots is empty
        @Test
        public void test_death_loots_empty() {
            Rectangle hitboxFlat = new Rectangle(0, 0, 10, 10);
            Polygon hitboxPolygon = new Polygon(new float[]{0, 0, 10, 0, 10, 10, 0, 10});
            List<Triplet<String, Integer, Integer>> deathLoots = new ArrayList<>();

            CollidableObject collidableObject = new CollidableObject("name", hitboxFlat, 0, 0, 10, hitboxPolygon, 10, 0, deathLoots);

            assertTrue(collidableObject.deathLoots.isEmpty());
        }

        // deathLoots has one element with third value smaller than second value
        @Test
        public void test_death_loots_invalid_range() {
            Rectangle hitboxFlat = new Rectangle(0, 0, 10, 10);
            Polygon hitboxPolygon = new Polygon(new float[]{0, 0, 10, 0, 10, 10, 0, 10});
            List<Triplet<String, Integer, Integer>> deathLoots = new ArrayList<>();
            deathLoots.add(new Triplet<>("loot", 5, 3));

            CollidableObject collidableObject = new CollidableObject("name", hitboxFlat, 0, 0, 10, hitboxPolygon, 10, 0, deathLoots);

            assertEquals(deathLoots, collidableObject.deathLoots);
        }

    }



}
